{"version":3,"sources":["components/Layout/index.js","components/Tracker/index.js","components/Table/index.js","views/Home/index.js","views/Country/index.js","views/NotFound/index.js","serviceWorker.js","index.js","views/routes.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Layout","props","children","classes","Fragment","CssBaseline","AppBar","position","Toolbar","style","textDecoration","color","to","Typography","variant","className","Container","maxWidth","paper","padding","textAlign","palette","text","secondary","Tracker","items","useFetch","Grid","container","Tooltip","item","xs","Paper","JSON","stringify","latest","marginTop","table","minWidth","CountryTable","data","console","log","TableContainer","component","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","confirmed","locations","map","row","index","key","name","scope","country","province","deaths","recovered","Home","Country","useParams","useState","setConfirmed","setDeaths","setRecovered","useEffect","undefined","find","_","Map","height","center","coordinates","lat","long","zoom","TileLayer","url","attribution","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","basename","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6187f0c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst Layout = props => {\n  const { children } = props;\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Link style={{ textDecoration: \"inherit\", color: \"white\" }} to=\"/\">\n            <Typography variant=\"h6\" className={classes.title}>\n              COVID-19\n            </Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"lg\">{children}</Container>\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n// Helpers\nimport { useFetch } from \"usefetch-caching\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\n\nexport default function Tracker() {\n  let items = useFetch(\n    `https://coronavirus-tracker-api.herokuapp.com/all`,\n    \"items\"\n  );\n\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {items ? (\n        <Grid container spacing={3}>\n          <Tooltip title=\"Confirmed\">\n            <Grid item xs>\n              <Paper className={classes.paper}>\n                ðŸ¤’ {JSON.stringify(items.latest[\"confirmed\"])}\n              </Paper>\n            </Grid>\n          </Tooltip>\n          <Tooltip title=\"Deaths\">\n            <Grid item xs>\n              <Paper className={classes.paper}>\n                ðŸ’€ {JSON.stringify(items.latest[\"deaths\"])}\n              </Paper>\n            </Grid>\n          </Tooltip>\n          <Tooltip title=\"Recovered\">\n            <Grid item xs>\n              <Paper className={classes.paper}>\n                âœ… {JSON.stringify(items.latest[\"recovered\"])}\n              </Paper>\n            </Grid>\n          </Tooltip>\n        </Grid>\n      ) : (\n        <h1>Loading...</h1>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Material\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\n// Helpers\nimport { useFetch } from \"usefetch-caching\";\n\nconst useStyles = makeStyles({\n  container: {\n    marginTop: 32\n  },\n  table: {\n    minWidth: 650\n  }\n});\n\nexport default function CountryTable() {\n  const classes = useStyles();\n\n  const data = useFetch(\n    `https://coronavirus-tracker-api.herokuapp.com/all`,\n    \"items\"\n  );\n\n  console.log(\"DATA\", data);\n\n  return data ? (\n    <TableContainer component={Paper} className={classes.container}>\n      <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Country</TableCell>\n            <TableCell>Province</TableCell>\n            <TableCell>Confirmed</TableCell>\n            <TableCell>Deaths</TableCell>\n            <TableCell>Recovered</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.confirmed.locations.map((row, index) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                <Link\n                  style={{ textDecoration: \"inherit\" }}\n                  to={`/country/${row.country}`}\n                >\n                  {row.country}\n                </Link>\n              </TableCell>\n              <TableCell>{row.province}</TableCell>\n              <TableCell>{row.latest}</TableCell>\n              <TableCell>{data.deaths.locations[index].latest}</TableCell>\n              <TableCell>{data.recovered.locations[index].latest}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  ) : (\n    <h1>Loading...</h1>\n  );\n}\n","import React from \"react\";\n\n//components\nimport Layout from \"../../components/Layout\";\nimport Tracker from \"../../components/Tracker\";\nimport CountryTable from \"../../components/Table\";\n\nexport default function Home() {\n  return (\n    <Layout>\n      <h1>Cases</h1>\n      <Tracker />\n      <CountryTable />\n    </Layout>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\n// Helpers\nimport { useFetch } from \"usefetch-caching\";\n\n//components\nimport Layout from \"../../components/Layout\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\n\nexport default function Country() {\n  let { country } = useParams();\n\n  const [confirmed, setConfirmed] = useState();\n  const [deaths, setDeaths] = useState();\n  const [recovered, setRecovered] = useState();\n  const [position, setPosition] = useState();\n\n  const data = useFetch(\n    `https://coronavirus-tracker-api.herokuapp.com/all`,\n    \"country\"\n  );\n\n  const findArray = () => {\n    setConfirmed(data.confirmed.locations.find(_ => _.country === country));\n    setDeaths(data.deaths.locations.find(_ => _.country === country));\n    setRecovered(data.recovered.locations.find(_ => _.country === country));\n    console.log(\"CONFIRMED\", confirmed);\n  };\n\n  useEffect(() => {\n    if (data !== undefined) {\n      findArray();\n    } else {\n      console.log(\"NO DATA\");\n    }\n  });\n\n  const classes = useStyles();\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <h1>{country}</h1>\n        {data && confirmed && deaths && recovered ? (\n          <>\n            <Grid container spacing={3}>\n              <Tooltip title=\"Confirmed\">\n                <Grid item xs>\n                  <Paper className={classes.paper}>\n                    ðŸ¤’ {confirmed[\"latest\"]}\n                  </Paper>\n                </Grid>\n              </Tooltip>\n              <Tooltip title=\"Deaths\">\n                <Grid item xs>\n                  <Paper className={classes.paper}>ðŸ’€ {deaths[\"latest\"]}</Paper>\n                </Grid>\n              </Tooltip>\n              <Tooltip title=\"Recovered\">\n                <Grid item xs>\n                  <Paper className={classes.paper}>\n                    âœ… {recovered[\"latest\"]}\n                  </Paper>\n                </Grid>\n              </Tooltip>\n            </Grid>\n            <Map\n              style={{ height: \"600px\", marginTop: \"32px\" }}\n              center={[confirmed.coordinates.lat, confirmed.coordinates.long]}\n              zoom={7}\n            >\n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n            </Map>\n            {/* <TableContainer component={Paper} className={classes.container}>\n              <Table\n                className={classes.table}\n                size=\"small\"\n                aria-label=\"simple table\"\n              >\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Country</TableCell>\n                    <TableCell>Province</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {confirmed.history.map((row, index) => (\n                    <TableRow key={row.name}>\n                      <TableCell>{row.key}</TableCell>\n                      <TableCell>{row.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer> */}\n          </>\n        ) : (\n          <h1>Loading...</h1>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","import React from \"react\";\n\n//components\nimport Layout from \"../../components/Layout\";\n\nexport default function NotFound() {\n  return (\n    <Layout>\n      <h1>NotFOuNBNDDD</h1>\n    </Layout>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./views/routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//views\nimport Home from \"./Home\";\nimport Country from \"./Country\";\nimport NotFound from \"./NotFound\";\n\nexport default function App() {\n  return (\n    <Router basename=\"/covid19-tracker\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/country/:country\">\n          <Country />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n"],"sourceRoot":""}